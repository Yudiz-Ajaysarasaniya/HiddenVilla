@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"
@using Business.Repository.IRepository
@using Models.DTO
@inject IHotelAmenityRepository AmenityRepository
@inject IJSRuntime JsRunTime
@inject NavigationManager Navigation
@attribute [Authorize(Roles = Common.Roles.Role_Admin)]
@* @page "/hotel-amenity/edit/{Id:int}" *@


<div class="row mt-2 mb-5">
    <h3 class="card-title text-success mb-3 ml-3">Create Hotel Amenity</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="hotelAmenity" OnValidSubmit="HandleAmenityInsertUpdate">
                    <DataAnnotationsValidator/>
                    <div class="form-group">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="hotelAmenity.Name"></InputText>
                        <ValidationMessage For="()=> hotelAmenity.Name"></ValidationMessage>  @* using arrow "()=>" function *@
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <InputText class="form-control" @bind-Value="hotelAmenity.Description"></InputText>
                        <ValidationMessage For="()=> hotelAmenity.Description"></ValidationMessage>  
                    </div>
                    <div class="form-group">
                        <label class="form-label">Timing</label>
                        <InputText class="form-control" @bind-Value="hotelAmenity.Timing"></InputText>
                        <ValidationMessage For="()=> hotelAmenity.Timing"></ValidationMessage>  
                    </div>
                    <div class="form-group">
                        <label class="form-label">Icon Style</label>
                        <InputText class="form-control" @bind-Value="hotelAmenity.Icon"></InputText>
                        <ValidationMessage For="()=> hotelAmenity.Icon"></ValidationMessage>  
                    </div>
                    <br />
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Amenity</button>
                        <NavLink href="hotel-amenity" class="btn btn-secondary">Back To Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelAmenityDTO hotelAmenity { get; set; } = new HotelAmenityDTO();
    private string Title { get; set; } = "Create";

    protected override async Task OnInitializedAsync()
    {
        if(Id != null)
        {
            //Updating
            Title = "Update";
            hotelAmenity = await AmenityRepository.GetAmenity(Id.Value);
        }
        else
        {
            //creating
            hotelAmenity = new HotelAmenityDTO();
        }
    }

    private async Task HandleAmenityInsertUpdate()
    {
        try
        {
            var CheckExist = await AmenityRepository.IsUnique(hotelAmenity.Name, hotelAmenity.Id);
            if (CheckExist != null)
            {
                await JsRunTime.ToastrError("Amenity Already Exist");
                return;
            }
            if (Id != 0 && Title == "Update")
            {
                //update
                var UpdateAmenity = await AmenityRepository.UpdateAmenity(hotelAmenity.Id, hotelAmenity); 
                await JsRunTime.ToastrSuccess("Hotel Amenity Updated Successfully");
            }
            else
            {
                //create
                var CreateAmenity = AmenityRepository.CreateAmenity(hotelAmenity);
                await JsRunTime.ToastrSuccess("Amenity Added Succesfully");
            }
        }
        catch(Exception e)
        {
            throw;
        }
        Navigation.NavigateTo("hotel-amenity");
    }
}
