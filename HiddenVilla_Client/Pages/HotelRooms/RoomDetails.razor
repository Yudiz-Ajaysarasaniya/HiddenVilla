@page "/hotel/room-details/{Id:int}"
@using Microsoft.AspNetCore.Authorization
@using Models.Response
@inject IHotelRoomService hotelRoomService
@inject IPaymentService paymentService
@inject IRoomOrderDetailsService orderDetailService
@attribute [Authorize(Roles = Roles.Role_Customer)]

@if (RoomBookingVM?.OrderDetailsDTO?.HotelRoomDTO?.HotelRoomImages == null)
{
    <div class="spinner"></div>
}
else
{
<div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

    <div class="row p-2 my-3 " style="border-radius:20px; ">
        <div class="col-12 col-lg-7 p-4" style="border: 1px solid #fff">
            <div class="row px-2 text-success border-bottom">
                <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Selected Room</p></div>
                <div class="col-4 p-0"><a href="hotel/room" class="btn btn-secondary btn-block">Back to Room's</a></div>
            </div>

            <div class="row">
                <div class="col-6">
                    <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                        <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                            <ol class="carousel-indicators">
                                @{
                                        int imageIndex = 0;
                                        int innerImageIndex = 0;
                                }
                                @foreach (var image in RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.HotelRoomImages)
                                    {
                                        if (imageIndex == 0)
                                        {
                                <li data-target="#carouselExampleIndicators" data-slide-to="@imageIndex" class="active"></li>

                                        }
                                        else
                                        {
                                <li data-target="#carouselExampleIndicators" data-slide-to="@imageIndex"></li>
                                        }
                                        imageIndex++;
                                    }
                            </ol>
                            <div class="carousel-inner">
                                @foreach (var image in RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.HotelRoomImages)
                                    {
                                        if (innerImageIndex == 0)
                                        {
                                <div class="carousel-item active">
                                    <img class="d-block w-100" style="border-radius:20px;" src="@image.RoomImageUrl" alt="First slide">
                                </div>
                                        }
                                        else
                                        {
                                <div class="carousel-item">
                                    <img class="d-block w-100" style="border-radius:20px;" src="@image.RoomImageUrl" alt="First slide">
                                </div>
                                        }

                                        innerImageIndex++;
                                    }
                            </div>
                            <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                <span class="sr-only">Previous</span>
                            </a>
                            <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                <span class="sr-only">Next</span>
                            </a>
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <span class="float-right pt-4">
                        <span class="float-right">Max Occupancy : @RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.Occupancy adults </span><br />
                        <span class="float-right pt-1">Villa Size : @RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.SqFt sqft</span><br />
                        <h4 class="text-warning font-weight-bold pt-5">
                            USD
                            <span style="border-bottom:1px solid #ff6a00">
                                @RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalAmmount.ToString("#,#.00#;(#,#.00#)")
                            </span>
                        </h4>
                        <span class="float-right">Cost for @RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalDays nights</span>
                    </span>
                </div>
            </div>
            <div class="row p-2">
                <div class="col-12">
                    <p class="card-title text-warning" style="font-size:xx-large">@RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.Name</p>
                    <p class="card-text" style="font-size:large">
                        @((MarkupString)@RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.Details)
                    </p>
                </div>

            </div>
        </div>

        <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #fff;">
            <EditForm Model="RoomBookingVM" class="container" OnValidSubmit="HandleCheckout">
                <div class="row px-2 text-success border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Enter Details</p></div></div>
                <div class="form-group pt-2">
                    <label class="text-warning">Name</label>
                    <InputText @bind-Value="RoomBookingVM.OrderDetailsDTO.Name" type="text" class="form-control" />
                </div>
                <div class="form-group pt-2">
                    <label class="text-warning">Phone</label>
                    <InputText @bind-Value="RoomBookingVM.OrderDetailsDTO.Phone" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Email</label>
                    <InputText @bind-Value="RoomBookingVM.OrderDetailsDTO.Email" type="text" class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Check in Date</label>
                    <InputDate @bind-Value="RoomBookingVM.OrderDetailsDTO.CheckInDate" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">Check Out Date</label>
                    <InputDate @bind-Value="RoomBookingVM.OrderDetailsDTO.CheckOutDate" disabled class="form-control" />
                </div>
                <div class="form-group">
                    <label class="text-warning">No. of nights</label>
                    <select class="form-control" value="@Nights" @onchange="HandleNoOfNightsChange">
                        @for (var i = 1; i <= 10; i++)
                            {
                                if (i == Nights)
                                {
                        <option value="@i" selected="selected">@i</option>
                                }
                                else
                                {
                        <option value="@i">@i</option>
                                }
                            }
                    </select>
                </div>
                <div class="form-group">

                    @if (RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.IsBooked)
                        {
                    <input class="btn btn-secondary form-control" value="Sold Out" />
                        }
                        else
                        {
                    <button type="submit" class="btn btn-success form-control">Checkout Now</button>
                        }
                </div>
            </EditForm>
        </div>
    </div>
</div>

}

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomBookingVM RoomBookingVM { get; set; } = new HotelRoomBookingVM();
    private int Nights { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            RoomBookingVM.OrderDetailsDTO = new RoomOrderDetailsDTO();
            if(Id != null)
            {
                if(await localStorage.GetItemAsync<HomeVM>(LStorage.localstorage) != null)
                {
                    var roomInitialInfo = await localStorage.GetItemAsync<HomeVM>(LStorage.localstorage);
                    RoomBookingVM.OrderDetailsDTO.HotelRoomDTO = await hotelRoomService.GetHotelRoomDetails(Id.Value,
                    roomInitialInfo.StartDate.ToString("MM/dd/yyyy"), roomInitialInfo.EndDate.ToString("MM/dd/yyyy"));
                    Nights = roomInitialInfo.Nights;
                    RoomBookingVM.OrderDetailsDTO.CheckInDate = roomInitialInfo.StartDate;
                    RoomBookingVM.OrderDetailsDTO.CheckOutDate = roomInitialInfo.EndDate;
                    RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalDays = roomInitialInfo.Nights;
                    RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalAmmount = roomInitialInfo.Nights * RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.RagularRate;
                }
                else
                {
                    RoomBookingVM.OrderDetailsDTO.HotelRoomDTO = await hotelRoomService.GetHotelRoomDetails(Id.Value,
                   DateTime.UtcNow.ToString("MM/dd/yyyy"), DateTime.UtcNow.AddDays(1).ToString("MM/dd/yyyy"));
                    Nights = 1;
                    RoomBookingVM.OrderDetailsDTO.CheckInDate = DateTime.UtcNow;
                    RoomBookingVM.OrderDetailsDTO.CheckOutDate = DateTime.UtcNow.AddDays(1);
                    RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalDays = 1;
                    RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalAmmount = RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.RagularRate;
                }
            }

            if (await localStorage.GetItemAsync<User>(LStorage.UserDetails) != null)
            {
                var userInfo = await localStorage.GetItemAsync<User>(LStorage.UserDetails);
                RoomBookingVM.OrderDetailsDTO.UserId = userInfo.Id;
                RoomBookingVM.OrderDetailsDTO.Name = userInfo.Name;
                RoomBookingVM.OrderDetailsDTO.Email = userInfo.Email;
                RoomBookingVM.OrderDetailsDTO.Phone = userInfo.Phone;
            }
        }
        catch(Exception e)
        {
            await jsRunTime.ToastrError(e.Message);
        }
    }

    private async Task HandleCheckout()
    {
        if (!await HandleValidation())
        {
            return;
        }

        try
        {
            var payment = new StripePeymentDTO
                {
                    Amount = Convert.ToInt32(RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalAmmount * 100),
                    ProductName = RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.Name,
                    ReturnUrl = "hotel/room-details/" + Id,
                    ImageUrl = []
                };

            var result = await paymentService.CheckOut(payment);

            RoomBookingVM.OrderDetailsDTO.StripeSessionId = result.Data.ToString();
            RoomBookingVM.OrderDetailsDTO.RoomId = RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.Id;
            RoomBookingVM.OrderDetailsDTO.TotalCost = RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalAmmount;
            RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.ImageUrls = payment.ImageUrl;

            var saveOrderDetails = await orderDetailService.SaveRoomOrderDetails(RoomBookingVM.OrderDetailsDTO);

            await localStorage.SetItemAsync(LStorage.RoomOrder, saveOrderDetails);

            await jsRunTime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch(Exception e)
        {   
           await jsRunTime.ToastrError(e.Message);
        }
    }

    private async Task HandleNoOfNightsChange(ChangeEventArgs e)
    {
        Nights = Convert.ToInt32(e.Value.ToString());
        RoomBookingVM.OrderDetailsDTO.HotelRoomDTO = await hotelRoomService.GetHotelRoomDetails(Id.Value,
        RoomBookingVM.OrderDetailsDTO.CheckInDate.ToString("MM/dd/yyyy"), RoomBookingVM.OrderDetailsDTO.CheckInDate.AddDays(Nights).ToString("MM/dd/yyyy"));

        RoomBookingVM.OrderDetailsDTO.CheckOutDate = RoomBookingVM.OrderDetailsDTO.CheckInDate.AddDays(Nights);
        RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalDays = Nights;
        RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.TotalAmmount = Nights * RoomBookingVM.OrderDetailsDTO.HotelRoomDTO.RagularRate;
    }

    private async Task<bool> HandleValidation()
    {
        if (string.IsNullOrEmpty(RoomBookingVM.OrderDetailsDTO.Name))
        {
            await jsRunTime.ToastrError("Name cannot be empty");
            return false;
        }
        if (string.IsNullOrEmpty(RoomBookingVM.OrderDetailsDTO.Phone))
        {
            await jsRunTime.ToastrError("Phone cannot be empty");
            return false;
        }

        if (string.IsNullOrEmpty(RoomBookingVM.OrderDetailsDTO.Email))
        {
            await jsRunTime.ToastrError("Email cannot be empty");
            return false;
        }
        return true;
    }
 }
